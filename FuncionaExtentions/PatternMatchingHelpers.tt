<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
namespace Fx
{

<# for(int i = 2; i < 10; i++) { #>
<# var typeStr = string.Join(",", Enumerable.Range(1, i).Select(x => "T" + x)); #>
    public sealed class Matcher<<#=typeStr#>,T,R> : MatchBase<T,R>
        where T : class, IDiscriminatedUnion
<#for(int k=1; k<=i; k++){ #>
		where T<#=k#> : class
<# } #>
    {
        public Matcher(Tuple<Type, Expression, Expression>[] caseList) : base(caseList){}

<#for(int k=1; k<=i; k++){ #>
        public Matcher<<#=typeStrWithout(k, i)#>,T,R> With(Expression<Func<T<#=k#>,R>> f)
        {
            return new Matcher<<#=typeStrWithout(k, i)#>,T,R>(AddItem(f));
        }
        public Matcher<<#=typeStr#>,T,R> With(Expression<Predicate<T<#=k#>>> pred, Expression<Func<T<#=k#>, R>> f)
        {
            return new Matcher<<#=typeStr#>,T,R>(AddItem(pred, f));
        }
<# } #>
    }

<# } #>

	public static class PatternMatchingHelper
	{
<# for(int i = 2; i < 10; i++) { #>
<# var typeStr = string.Join(",", Enumerable.Range(1, i).Select(x => "T" + x)); #>
	public static Matcher<<#=typeStr#>, DiscriminatedUnion<<#=typeStr#>>,R> Match<<#=typeStr#>,R>(this DiscriminatedUnion<<#=typeStr#>> du, R target)
<#for(int k=1; k<=i; k++){ #>
		where T<#=k#> : class
<# } #>
	{
		return new Matcher<<#=typeStr#>,DiscriminatedUnion<<#=typeStr#>>,R>(new Tuple<Type, Expression, Expression>[0]);
	}
	
<# } #>

	}


}
<#+ private  string typeStrWithout(int skip, int count)
	{
		return string.Join(",", Enumerable.Range(1, count).Where(x => x!= skip).Select(x => "T" + x));
	} 
#>